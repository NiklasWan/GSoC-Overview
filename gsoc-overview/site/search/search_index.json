{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Overview Student: Niklas Wantrupp Mentors: henrix rma Drew Fustini Indumathi Duraipandian Project Description The BeagleBone AI is equipped with a high amount of processing power due to the Dual Core ARM Cortex-A15 chip as a main computing unit and its accompanying co-processors. This makes the AI a perfect fit for highly demanding applications regarding CPU consumption, like media applications which have extremely strong realtime constraints. Professional audio/video studios have to guarantee for small latencies when transmitting media signals between different devices. Different media channels in a transmitted stream need to be carefully synchronized to guarantee for e.g. lip synchronicity. To use the AI in such a scenario, the AVB protocol stack should be implemented in the Beagleboard Linux Kernel, which allows for synchronization of media streams within a local area network. Furthermore the CTAG Face audio drivers should be ported from BeagleBoard-X15 and HDMI audio out capabilities should be deployed, to allow the in- and output of audio data. Project Goals Optimal outcome: Merge everything into BeagleBoard.org Linux kernel Port CTAG Face drivers implemented by henrix for GSoC 2016 to Linux kernel 4.19-rt for BeagleBone AI [ Merged driver , Merged overlays , Documentation ] \u2611 Port AVB driver stack implemented by indu for GSoC 2017 to Linux kernel 4.19-rt for BeagleBone AI [ Open , Documentation ] \u2611 Refactor and modularize present AVB driver architecture \u2611 Implement AVDECC protocol part of AVB to allow for device enumeration and control \u2611 Project Outcome During the project I successfully ported the CTAG Face drivers by henrix from kernel version 4.4 to 4.19-rt and started porting to 5.4-rt for both BBB and BBAI. The port to 5.4-rt however still needs some adjustments, look here to see a description. The second part of the project was to port the virtual ALSA driver of indu from kernel 4.4 to 4.19-rt. During the course of the project I however realized, that 4.19-rt is running quite unstable on BBAI. Because of that I changed to kernel 5.4-rt for the implementation. The driver code was modularized and refactored and the AVDECC protocol part which indu allready implemented was also ported. However the implementation is still not working correctly with third party devices, like the proprietary Apple Mac implementation. All further limitations of the AVB implementation can be found here . List of Pull Requests Pull Request Status CTAG Face driver merged CTAG Face overlays merged CTAG Face overlays compatibility fix merged Virtual ALSA driver open Further Links Youtube Intro Video Youtube Demonstration Video Elinux Project Page Kernel Repository avbtest fork gptpd fork BeagleBoard Overlay fork Compatibility Update fork","title":"Project Overview"},{"location":"#project-overview","text":"Student: Niklas Wantrupp Mentors: henrix rma Drew Fustini Indumathi Duraipandian","title":"Project Overview"},{"location":"#project-description","text":"The BeagleBone AI is equipped with a high amount of processing power due to the Dual Core ARM Cortex-A15 chip as a main computing unit and its accompanying co-processors. This makes the AI a perfect fit for highly demanding applications regarding CPU consumption, like media applications which have extremely strong realtime constraints. Professional audio/video studios have to guarantee for small latencies when transmitting media signals between different devices. Different media channels in a transmitted stream need to be carefully synchronized to guarantee for e.g. lip synchronicity. To use the AI in such a scenario, the AVB protocol stack should be implemented in the Beagleboard Linux Kernel, which allows for synchronization of media streams within a local area network. Furthermore the CTAG Face audio drivers should be ported from BeagleBoard-X15 and HDMI audio out capabilities should be deployed, to allow the in- and output of audio data.","title":"Project Description"},{"location":"#project-goals","text":"Optimal outcome: Merge everything into BeagleBoard.org Linux kernel Port CTAG Face drivers implemented by henrix for GSoC 2016 to Linux kernel 4.19-rt for BeagleBone AI [ Merged driver , Merged overlays , Documentation ] \u2611 Port AVB driver stack implemented by indu for GSoC 2017 to Linux kernel 4.19-rt for BeagleBone AI [ Open , Documentation ] \u2611 Refactor and modularize present AVB driver architecture \u2611 Implement AVDECC protocol part of AVB to allow for device enumeration and control \u2611","title":"Project Goals"},{"location":"#project-outcome","text":"During the project I successfully ported the CTAG Face drivers by henrix from kernel version 4.4 to 4.19-rt and started porting to 5.4-rt for both BBB and BBAI. The port to 5.4-rt however still needs some adjustments, look here to see a description. The second part of the project was to port the virtual ALSA driver of indu from kernel 4.4 to 4.19-rt. During the course of the project I however realized, that 4.19-rt is running quite unstable on BBAI. Because of that I changed to kernel 5.4-rt for the implementation. The driver code was modularized and refactored and the AVDECC protocol part which indu allready implemented was also ported. However the implementation is still not working correctly with third party devices, like the proprietary Apple Mac implementation. All further limitations of the AVB implementation can be found here .","title":"Project Outcome"},{"location":"#list-of-pull-requests","text":"Pull Request Status CTAG Face driver merged CTAG Face overlays merged CTAG Face overlays compatibility fix merged Virtual ALSA driver open","title":"List of Pull Requests"},{"location":"#further-links","text":"Youtube Intro Video Youtube Demonstration Video Elinux Project Page Kernel Repository avbtest fork gptpd fork BeagleBoard Overlay fork Compatibility Update fork","title":"Further Links"},{"location":"avb-alsa/","text":"AVB Alsa driver Introduction The Alsa AVB driver is based on the Implemenatation of indu and consists of three modules. The IEEE 802.1-AS protocol (gPTP) is implemented in the gPTP User Space daemon. The IEEE 1722-2011 Layer 2 (AVTP), IEEE 1722.1-2013 (AVDECC) and IEEE 802.1Qat-2010 (MSRP) protocols are implemented in the virtual ALSA AVB driver. A file can be played back using the AVB-Test application. The project objective is to port and refactor/modularize the ALSA AVB driver including the two user applications to the Beaglebone AI using kernel version 5.4-RT. Architecture The basic structure of the AVB kernel space and user space modules can be seen in the following component diagram. The straight dashed red lines show the borders between User and Kernel Space. The components, which needed adjustments are marked with dashed red circles. For the user space modules just the avbtest application needed adjustments to allow playback of received audio data via the HDMI port of the BBAI. The kernel space module needed some adjustments, which are specifically described in Adjustments . Adjustments Here, the most prominent changes are shown, which needed adjustments, for successfully porting the AVB ALSA driver to the 5.4-RT kernel on BBAI. Modularization and Refactoring The source code of indu was seperated into different files, to improve readability and separation of source code. Therefore, the AVTP, the MSRP and the AVDECC protocols have been split into several files. This also required some small changes within interface definitions. Additionally, a common utility header was introduced, which implements functionality and macros, which are used in several modules. To seperate the avb driver from other ALSA drivers, the implementation directory was changed to /linux/sound/drivers/avb . Also the whole codebase was inspected and code was changed to conform to linux kernel coding conventions. Abstraction of PTP HW clock (Not included in final submission) Additionally some research was conducted in how to access the PTP hardware clock of the NIC. On TI devices the hardware clock is implemented in the CPTS (Common Platform Time Sync) module. To abstract away access to the HW clock for other NIC's an abstraction layer was implemented, which can be found here . The abstraction is done in avb_hwclock.h and avb_hwclock.c , ti_hwclock.c implements this interface for ti devices. At first it was planned to implement synchronization of different audio streams in kernel space but due to the fact, that we want to playback audio to different devices, we can't handle this in kernel space. Because of that, we decided to not use the PTP HW clock in kernel space. Porting the gPTP User Space daemon to the kernel space (Not included in final submission) Also some time was invested in trying to port the gPTP daemon to Kernel Space. This however failed, because I was not able to access the CMSGHDR data, for accessing the TX hardware timestamps. All other parts however are working fine in kernel space and can be found here . If you want to continue working on porting this to kernel space, take a look here . The functions, void get_rx_ts(struct gptp_instance* gptp, struct timespec64* ts) and void get_tx_ts(struct gptp_instance* gptp, struct timespec64* ts) are causing the issues in accessing the CMSGHDR of a packet. Maybe somone can find a way to access the timestamp information. Changed snd_pcm_hardware description of playback capture device. Here the .periods_min parameter was adjusted, to adjust the minimum length of pcm interrupts. This was needed due some overrun issues while playing back and recording audio data with the AVB sound card. The following listing shows the resulting structure for the playback hardware, which is redundant to the capture hardware. static struct snd_pcm_hardware avb_playback_hw = { .info = (SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER), .formats = SNDRV_PCM_FMTBIT_S16_LE, .rates = SNDRV_PCM_RATE_8000_192000, .rate_min = 8000, .rate_max = 192000, .channels_min = 1, .channels_max = 8, .buffer_bytes_max = 131072, .period_bytes_min = 16384, .period_bytes_max = 131072, .periods_min = 2, .periods_max = 4, }; Changed snd_pcm_ops copy function Because of API changes between kernel version 4.4 and 5.4, the playback and capture copy function needed some adjustments. One point is, that in kernel version 5.4 the count of data to copy and the position in the buffer are no longer passed in number of frames but instead the number of bytes are passed. So the parameters needed to be calculated in frames first to allow for expected behavior. The second point was, that the member of snd_pcm_ops which handles copying between user and kernel space now was renamed to .copy_user . Changed to kernel sockets The socket communication was changed to the kernel space sockets. So now all functions from linux/net.h prepended with kernel_<op> are being used. Installation and Usage If you do not want to compile the kernel, avbtest-application and the gptp daemon by hand, you can obtain a working image for both, the BBB and the BBAI from here . To install it just download the corresponding image for your platform and install onto an SD card using BalenaEtcher. Compilation of the kernel module The ALSA AVB Driver runs on 5.4-rt, for both BBB and BBAI. In the following all required steps to compile the driver including the Linux kernel are shown. 1.) Clone kernel from here git clone https://github.com/NiklasWan/linux.git && cd linux && git checkout dev_avb_5.4-rt 2.) Load BB device configuration: make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bb.org_defconfig 3.) Open menuconfig and Go to Device Drivers - Sound Card Support - Advanced Linux Sound Architecture and choose module build \"M\" for Generic AVB driver 4.) Build kernel: make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bindeb-pkg -j8 Compilation of the gptp daemon To compile the gptp daemon for the ARM platform simply issue the following commands: 1.) Clone repository: git clone https://github.com/NiklasWan/gPTPd.git 2.) Compile gptpd: make CROSS_COMPILE=arm-linux-gnueabihf- bbb Compilation of the avbtest app To allow for compilation of the avbtest app on a non ARM system for an ARM system, we first need to install libasound2 for our Cross Compiler. The following installation routine applies to the gnueabihf compiler from the apt repository. 1.) Check the required ALSA version on Beaglebone: aplay --version 2.) Download the alsa library: wget ftp://ftp.alsa-project.org/pub/lib/alsa-lib-<version>.tar.bz 3.) Unpack and remove archive: tar -xf alsa-lib-<version>.tar.bz2 && rm alsa-lib-<version>.tar.bz2 4.) Configure Cross Compilation: CC=arm-linux-gnueabihf-gcc ./configure --host=arm-linux --prefix=/usr/arm-linux-gnueabihf 5.) Run make and make install as super user: sudo make && sudo make install After finishing the installation of the alsa developer library you can compile the avbtest app using the following commands: 1.) Clone avbtest: git clone https://github.com/NiklasWan/avbtest.git 2.) Compile avbtest: make CROSS_COMPILE=arm-linux-gnueabihf- all Installation of the AVB Stack First we need to install a new pre built image to an SD card: 1.) Download current Image for your device at: https://beagleboard.org/latest-images 2.) Install image using Balena Etcher After that we can install the built kernel in step Compilation of the kernel module : 1.) Copy built linux image, linux header and linux libc to sd card: sudo cp linux-* /media/dev/rootfs/home/debian 2.) Start BB from Sd Card and Install kernel: sudo dpkg -i linux-headers* sudo dpkg -i linux-libc* sudo dpkg -i linux-image* 3.) Restart: sudo restart The last step is to copy both the gptp daemon and the avbtest app to the home directory of the SD card: 1.) Copy avbtest app: sudo cp avbtest /media/dev/rootfs/home/debian 2.) Copy gptp daemon: sudo cp gptpd /media/dev/rootfs/home/debian Usage of the AVB Stack All different variants require two BBB's or BBAI's being conneced via a cross ethernet cable. The following steps need to be followed after starting up the device every time for listener and receiver: Start gPTP daemon sudo ./gptpd Load hwdep module sudo modprobe snd-hwdep Load AVB module sudo modprobe snd-avb When using provided images sudo insmod snd-avb.ko The avbtest app of indu has been modified and stripped down to just handle HDMI playback and USB output, because the porting of the CTAG Face drivers to kernel 5.4-rt was not successfull. 1.) Use Case: Stream audio data from BBB to BBAI and save file to disk: Steps on receiver device: Start recording sudo ./avbtest -r -c<number_of_channels> -l<log_level> -s<sampling_rate> <name_of_file_to_be_saved>.wav Steps on playback device: Start playback sudo ./avbtest -p -c<number_of_channels> -l<log_level> -s<sampling_rate> <name_of_file_to_be_played_back>.wav 2.) Use Case: Stream audio data from BBB to BBAI and playback via HDMI Steps on receiver device: Start recording sudo ./avbtest -y -c<number_of_channels> -l<log_level> -s<sampling_rate> <dummy_name>.wav Steps on playback device: Start playback sudo ./avbtest -x -c<number_of_channels> -l<log_level> -s<sampling_rate> <name_of_file_to_be_played_back>.wav Limitations Until now the implementation has the following limitations: Audio file has to be a multiple of the ALSA period size in length Playback of one stream with up to 8 channels Playback between on Listener (BBB) and one Talker (BBAI) AVDECC identification on an Apple MAC with propriatery AVB soulution of Beagleboard Device using ALSA AVB driver is not working properly (However the avbdiagnose application is able to identify the Beagleboard device)","title":"AVB Alsa driver"},{"location":"avb-alsa/#avb-alsa-driver","text":"","title":"AVB Alsa driver"},{"location":"avb-alsa/#introduction","text":"The Alsa AVB driver is based on the Implemenatation of indu and consists of three modules. The IEEE 802.1-AS protocol (gPTP) is implemented in the gPTP User Space daemon. The IEEE 1722-2011 Layer 2 (AVTP), IEEE 1722.1-2013 (AVDECC) and IEEE 802.1Qat-2010 (MSRP) protocols are implemented in the virtual ALSA AVB driver. A file can be played back using the AVB-Test application. The project objective is to port and refactor/modularize the ALSA AVB driver including the two user applications to the Beaglebone AI using kernel version 5.4-RT.","title":"Introduction"},{"location":"avb-alsa/#architecture","text":"The basic structure of the AVB kernel space and user space modules can be seen in the following component diagram. The straight dashed red lines show the borders between User and Kernel Space. The components, which needed adjustments are marked with dashed red circles. For the user space modules just the avbtest application needed adjustments to allow playback of received audio data via the HDMI port of the BBAI. The kernel space module needed some adjustments, which are specifically described in Adjustments .","title":"Architecture"},{"location":"avb-alsa/#adjustments","text":"Here, the most prominent changes are shown, which needed adjustments, for successfully porting the AVB ALSA driver to the 5.4-RT kernel on BBAI.","title":"Adjustments"},{"location":"avb-alsa/#modularization-and-refactoring","text":"The source code of indu was seperated into different files, to improve readability and separation of source code. Therefore, the AVTP, the MSRP and the AVDECC protocols have been split into several files. This also required some small changes within interface definitions. Additionally, a common utility header was introduced, which implements functionality and macros, which are used in several modules. To seperate the avb driver from other ALSA drivers, the implementation directory was changed to /linux/sound/drivers/avb . Also the whole codebase was inspected and code was changed to conform to linux kernel coding conventions.","title":"Modularization and Refactoring"},{"location":"avb-alsa/#abstraction-of-ptp-hw-clock-not-included-in-final-submission","text":"Additionally some research was conducted in how to access the PTP hardware clock of the NIC. On TI devices the hardware clock is implemented in the CPTS (Common Platform Time Sync) module. To abstract away access to the HW clock for other NIC's an abstraction layer was implemented, which can be found here . The abstraction is done in avb_hwclock.h and avb_hwclock.c , ti_hwclock.c implements this interface for ti devices. At first it was planned to implement synchronization of different audio streams in kernel space but due to the fact, that we want to playback audio to different devices, we can't handle this in kernel space. Because of that, we decided to not use the PTP HW clock in kernel space.","title":"Abstraction of PTP HW clock (Not included in final submission)"},{"location":"avb-alsa/#porting-the-gptp-user-space-daemon-to-the-kernel-space-not-included-in-final-submission","text":"Also some time was invested in trying to port the gPTP daemon to Kernel Space. This however failed, because I was not able to access the CMSGHDR data, for accessing the TX hardware timestamps. All other parts however are working fine in kernel space and can be found here . If you want to continue working on porting this to kernel space, take a look here . The functions, void get_rx_ts(struct gptp_instance* gptp, struct timespec64* ts) and void get_tx_ts(struct gptp_instance* gptp, struct timespec64* ts) are causing the issues in accessing the CMSGHDR of a packet. Maybe somone can find a way to access the timestamp information.","title":"Porting the gPTP User Space daemon to the kernel space (Not included in final submission)"},{"location":"avb-alsa/#changed-snd_pcm_hardware-description-of-playback-capture-device","text":"Here the .periods_min parameter was adjusted, to adjust the minimum length of pcm interrupts. This was needed due some overrun issues while playing back and recording audio data with the AVB sound card. The following listing shows the resulting structure for the playback hardware, which is redundant to the capture hardware. static struct snd_pcm_hardware avb_playback_hw = { .info = (SNDRV_PCM_INFO_INTERLEAVED | SNDRV_PCM_INFO_BLOCK_TRANSFER), .formats = SNDRV_PCM_FMTBIT_S16_LE, .rates = SNDRV_PCM_RATE_8000_192000, .rate_min = 8000, .rate_max = 192000, .channels_min = 1, .channels_max = 8, .buffer_bytes_max = 131072, .period_bytes_min = 16384, .period_bytes_max = 131072, .periods_min = 2, .periods_max = 4, };","title":"Changed snd_pcm_hardware description of playback capture device."},{"location":"avb-alsa/#changed-snd_pcm_ops-copy-function","text":"Because of API changes between kernel version 4.4 and 5.4, the playback and capture copy function needed some adjustments. One point is, that in kernel version 5.4 the count of data to copy and the position in the buffer are no longer passed in number of frames but instead the number of bytes are passed. So the parameters needed to be calculated in frames first to allow for expected behavior. The second point was, that the member of snd_pcm_ops which handles copying between user and kernel space now was renamed to .copy_user .","title":"Changed snd_pcm_ops copy function"},{"location":"avb-alsa/#changed-to-kernel-sockets","text":"The socket communication was changed to the kernel space sockets. So now all functions from linux/net.h prepended with kernel_<op> are being used.","title":"Changed to kernel sockets"},{"location":"avb-alsa/#installation-and-usage","text":"If you do not want to compile the kernel, avbtest-application and the gptp daemon by hand, you can obtain a working image for both, the BBB and the BBAI from here . To install it just download the corresponding image for your platform and install onto an SD card using BalenaEtcher.","title":"Installation and Usage"},{"location":"avb-alsa/#compilation-of-the-kernel-module","text":"The ALSA AVB Driver runs on 5.4-rt, for both BBB and BBAI. In the following all required steps to compile the driver including the Linux kernel are shown. 1.) Clone kernel from here git clone https://github.com/NiklasWan/linux.git && cd linux && git checkout dev_avb_5.4-rt 2.) Load BB device configuration: make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bb.org_defconfig 3.) Open menuconfig and Go to Device Drivers - Sound Card Support - Advanced Linux Sound Architecture and choose module build \"M\" for Generic AVB driver 4.) Build kernel: make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bindeb-pkg -j8","title":"Compilation of the kernel module"},{"location":"avb-alsa/#compilation-of-the-gptp-daemon","text":"To compile the gptp daemon for the ARM platform simply issue the following commands: 1.) Clone repository: git clone https://github.com/NiklasWan/gPTPd.git 2.) Compile gptpd: make CROSS_COMPILE=arm-linux-gnueabihf- bbb","title":"Compilation of the gptp daemon"},{"location":"avb-alsa/#compilation-of-the-avbtest-app","text":"To allow for compilation of the avbtest app on a non ARM system for an ARM system, we first need to install libasound2 for our Cross Compiler. The following installation routine applies to the gnueabihf compiler from the apt repository. 1.) Check the required ALSA version on Beaglebone: aplay --version 2.) Download the alsa library: wget ftp://ftp.alsa-project.org/pub/lib/alsa-lib-<version>.tar.bz 3.) Unpack and remove archive: tar -xf alsa-lib-<version>.tar.bz2 && rm alsa-lib-<version>.tar.bz2 4.) Configure Cross Compilation: CC=arm-linux-gnueabihf-gcc ./configure --host=arm-linux --prefix=/usr/arm-linux-gnueabihf 5.) Run make and make install as super user: sudo make && sudo make install After finishing the installation of the alsa developer library you can compile the avbtest app using the following commands: 1.) Clone avbtest: git clone https://github.com/NiklasWan/avbtest.git 2.) Compile avbtest: make CROSS_COMPILE=arm-linux-gnueabihf- all","title":"Compilation of the avbtest app"},{"location":"avb-alsa/#installation-of-the-avb-stack","text":"First we need to install a new pre built image to an SD card: 1.) Download current Image for your device at: https://beagleboard.org/latest-images 2.) Install image using Balena Etcher After that we can install the built kernel in step Compilation of the kernel module : 1.) Copy built linux image, linux header and linux libc to sd card: sudo cp linux-* /media/dev/rootfs/home/debian 2.) Start BB from Sd Card and Install kernel: sudo dpkg -i linux-headers* sudo dpkg -i linux-libc* sudo dpkg -i linux-image* 3.) Restart: sudo restart The last step is to copy both the gptp daemon and the avbtest app to the home directory of the SD card: 1.) Copy avbtest app: sudo cp avbtest /media/dev/rootfs/home/debian 2.) Copy gptp daemon: sudo cp gptpd /media/dev/rootfs/home/debian","title":"Installation of the AVB Stack"},{"location":"avb-alsa/#usage-of-the-avb-stack","text":"All different variants require two BBB's or BBAI's being conneced via a cross ethernet cable. The following steps need to be followed after starting up the device every time for listener and receiver: Start gPTP daemon sudo ./gptpd Load hwdep module sudo modprobe snd-hwdep Load AVB module sudo modprobe snd-avb When using provided images sudo insmod snd-avb.ko The avbtest app of indu has been modified and stripped down to just handle HDMI playback and USB output, because the porting of the CTAG Face drivers to kernel 5.4-rt was not successfull. 1.) Use Case: Stream audio data from BBB to BBAI and save file to disk: Steps on receiver device: Start recording sudo ./avbtest -r -c<number_of_channels> -l<log_level> -s<sampling_rate> <name_of_file_to_be_saved>.wav Steps on playback device: Start playback sudo ./avbtest -p -c<number_of_channels> -l<log_level> -s<sampling_rate> <name_of_file_to_be_played_back>.wav 2.) Use Case: Stream audio data from BBB to BBAI and playback via HDMI Steps on receiver device: Start recording sudo ./avbtest -y -c<number_of_channels> -l<log_level> -s<sampling_rate> <dummy_name>.wav Steps on playback device: Start playback sudo ./avbtest -x -c<number_of_channels> -l<log_level> -s<sampling_rate> <name_of_file_to_be_played_back>.wav","title":"Usage of the AVB Stack"},{"location":"avb-alsa/#limitations","text":"Until now the implementation has the following limitations: Audio file has to be a multiple of the ALSA period size in length Playback of one stream with up to 8 channels Playback between on Listener (BBB) and one Talker (BBAI) AVDECC identification on an Apple MAC with propriatery AVB soulution of Beagleboard Device using ALSA AVB driver is not working properly (However the avbdiagnose application is able to identify the Beagleboard device)","title":"Limitations"},{"location":"face-driver/","text":"CTAG Face Alsa Driver The CTAG Face 2|4 is an audio card for Beaglebone devices, which is equipped with 2 input and 4 output channels. One of the goals for this GSoC project was to port the CTAG Face driver for usage on the BBAI and the BBB to linux kernel 4.19-rt. WARNING: To use the CTAG Face with the BBAI, stackable headers need to be used. This is due to the height of the passive cooling unit on the CPU. Adjustments Here the adjustments, which needed to be made are shown. During the project, I realized, that the linux kernel 4.19-rt is still not running stable on BBAI (As of August, 22 2020). Because of that, I also tried to port the driver to kernel version 5.4-rt, this however failed, because it took too long to adjust for the API changes in ALSA-ASoC API from 4.19 to 5.4. For both versions, the codec driver of the AD1938 had to be adjusted. This is due to the changes in how overlays are handled on BeagleBoards since kernel version 4.4. Back in that time overlays were loaded using the bone capemanager. A script was handled, how the face was loaded back then. There the reset pin (P8.34) had to be set to HIGH and then to LOW. This is needed to properly start the codec. Because the capemanager is now deprecated the reset functionality is now implemented in the sound/soc/codecs/ad193x.c file. The probe function of the codec is now responsible to reset the codec at startup. Information on Overlays During the course of GSoC, another GSoC student at BeagleBoard.org Deepak Khatri worked on a compatibility layer for overlays. Therefore he ported the overlays I created for BBB and BBAI which can be found here to the new overlay repository. The current status is the compatibility update 3 on his repository, which can be found here . The documentation on how overlays are handled now can be found here . Links to overlays: The implementation of the overlay BBAI (old way) can be found here The implementation of the overlay BBB (old way) can be found here The implementation for both overlays (new way) can be found here Drivers for 4.19-rt The implementation of the driver code can be found here Drivers for 5.4-rt The implementation for the driver code can be found here Known issues: - driver loads and aplay -l and arecord -l list the CTAG Face card, however it can not be controlled via amixer or `alsamixer . This is due to the spi-gpio bitbang driver being not loaded Compilation and installation of the kernel module The CTAG Face Alsa Driver runs on 4.19-rt, for both BBB and BBAI. To get the Face running on your device, please follow all steps. IMPORTANT NOTE: The uboot overlay process changed during the course of the project, both the BBAI and BBB version have been tested and are working. For installation on BBB the whole setup has to be done on the internal eMMC chip instead of an micro SD card. 1.) Clone kernel from here git clone https://github.com/NiklasWan/linux.git && cd linux && git chekout dev_gsoc_face_4.19-rt 2.) Load BB device configuration: make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bb.org_defconfig 3.) Open menuconfig and Go to Device Drivers - Sound Card Support - Advanced Linux Sound Architecture - ALSA for SoC audio support: Enable module build for SoC Audio Support for CTAG face-2-4 Audio Card (AD1938) 4.) Build kernel: make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bindeb-pkg -j8 5.) Download current Image for your device at: Latest images 6.) Install image using Balena Etcher 7.) Copy built linux image, linux header and linux libc to sd card: sudo cp linux-* /media/dev/rootfs/home/debian 8.) Start BB from Sd Card and Install kernel: sudo dpkg -i linux-headers* sudo dpkg -i linux-libc* sudo dpkg -i linux-image* 9.) Restart: sudo reboot 10.) Install bootloader update: sudo ./opt/scripts/tools/developers/update_bootloaders.sh 11.) Update system: sudo apt update && sudo apt upgrade 12.) Clone overlay repo: git clone https://github.com/NiklasWan/BeagleBoard-DeviceTrees.git && cd BeagleBoard-DeviceTrees && git checkout compatibility_Update3 13.) Install overlays: sudo make install 13.) Edit Uboot uEnv.txt: For BBAI: add the following lines to /boot/uEnv.txt: enable_uboot_overlays=1 uboot_overlay_addr0=BB-CTAG-SW-8CH-00A0.dtbo For BBB: uncomment: disable_uboot_overlay_video=1 disable_uboot_overlay_audio=1 add: uboot_overlay_addr0=BB-CTAG-SW-8CH-00A0.dtbo 14.) Clone https://github.com/ctag-fh-kiel/ctag-face-2-4.git: git clone https://github.com/ctag-fh-kiel/ctag-face-2-4.git & cd ctag-face-2-4 15.) Install alsa config: cd alsa-configs & sudo cp asound.conf.8ch ~/.asoundrc 16.) Reboot your board and use the audio card :-)","title":"CTAG Face Alsa Driver"},{"location":"face-driver/#ctag-face-alsa-driver","text":"The CTAG Face 2|4 is an audio card for Beaglebone devices, which is equipped with 2 input and 4 output channels. One of the goals for this GSoC project was to port the CTAG Face driver for usage on the BBAI and the BBB to linux kernel 4.19-rt. WARNING: To use the CTAG Face with the BBAI, stackable headers need to be used. This is due to the height of the passive cooling unit on the CPU.","title":"CTAG Face Alsa Driver"},{"location":"face-driver/#adjustments","text":"Here the adjustments, which needed to be made are shown. During the project, I realized, that the linux kernel 4.19-rt is still not running stable on BBAI (As of August, 22 2020). Because of that, I also tried to port the driver to kernel version 5.4-rt, this however failed, because it took too long to adjust for the API changes in ALSA-ASoC API from 4.19 to 5.4. For both versions, the codec driver of the AD1938 had to be adjusted. This is due to the changes in how overlays are handled on BeagleBoards since kernel version 4.4. Back in that time overlays were loaded using the bone capemanager. A script was handled, how the face was loaded back then. There the reset pin (P8.34) had to be set to HIGH and then to LOW. This is needed to properly start the codec. Because the capemanager is now deprecated the reset functionality is now implemented in the sound/soc/codecs/ad193x.c file. The probe function of the codec is now responsible to reset the codec at startup.","title":"Adjustments"},{"location":"face-driver/#information-on-overlays","text":"During the course of GSoC, another GSoC student at BeagleBoard.org Deepak Khatri worked on a compatibility layer for overlays. Therefore he ported the overlays I created for BBB and BBAI which can be found here to the new overlay repository. The current status is the compatibility update 3 on his repository, which can be found here . The documentation on how overlays are handled now can be found here . Links to overlays: The implementation of the overlay BBAI (old way) can be found here The implementation of the overlay BBB (old way) can be found here The implementation for both overlays (new way) can be found here","title":"Information on Overlays"},{"location":"face-driver/#drivers-for-419-rt","text":"The implementation of the driver code can be found here","title":"Drivers for 4.19-rt"},{"location":"face-driver/#drivers-for-54-rt","text":"The implementation for the driver code can be found here Known issues: - driver loads and aplay -l and arecord -l list the CTAG Face card, however it can not be controlled via amixer or `alsamixer . This is due to the spi-gpio bitbang driver being not loaded","title":"Drivers for 5.4-rt"},{"location":"face-driver/#compilation-and-installation-of-the-kernel-module","text":"The CTAG Face Alsa Driver runs on 4.19-rt, for both BBB and BBAI. To get the Face running on your device, please follow all steps. IMPORTANT NOTE: The uboot overlay process changed during the course of the project, both the BBAI and BBB version have been tested and are working. For installation on BBB the whole setup has to be done on the internal eMMC chip instead of an micro SD card. 1.) Clone kernel from here git clone https://github.com/NiklasWan/linux.git && cd linux && git chekout dev_gsoc_face_4.19-rt 2.) Load BB device configuration: make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bb.org_defconfig 3.) Open menuconfig and Go to Device Drivers - Sound Card Support - Advanced Linux Sound Architecture - ALSA for SoC audio support: Enable module build for SoC Audio Support for CTAG face-2-4 Audio Card (AD1938) 4.) Build kernel: make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- bindeb-pkg -j8 5.) Download current Image for your device at: Latest images 6.) Install image using Balena Etcher 7.) Copy built linux image, linux header and linux libc to sd card: sudo cp linux-* /media/dev/rootfs/home/debian 8.) Start BB from Sd Card and Install kernel: sudo dpkg -i linux-headers* sudo dpkg -i linux-libc* sudo dpkg -i linux-image* 9.) Restart: sudo reboot 10.) Install bootloader update: sudo ./opt/scripts/tools/developers/update_bootloaders.sh 11.) Update system: sudo apt update && sudo apt upgrade 12.) Clone overlay repo: git clone https://github.com/NiklasWan/BeagleBoard-DeviceTrees.git && cd BeagleBoard-DeviceTrees && git checkout compatibility_Update3 13.) Install overlays: sudo make install 13.) Edit Uboot uEnv.txt: For BBAI: add the following lines to /boot/uEnv.txt: enable_uboot_overlays=1 uboot_overlay_addr0=BB-CTAG-SW-8CH-00A0.dtbo For BBB: uncomment: disable_uboot_overlay_video=1 disable_uboot_overlay_audio=1 add: uboot_overlay_addr0=BB-CTAG-SW-8CH-00A0.dtbo 14.) Clone https://github.com/ctag-fh-kiel/ctag-face-2-4.git: git clone https://github.com/ctag-fh-kiel/ctag-face-2-4.git & cd ctag-face-2-4 15.) Install alsa config: cd alsa-configs & sudo cp asound.conf.8ch ~/.asoundrc 16.) Reboot your board and use the audio card :-)","title":"Compilation and installation of the kernel module"}]}